First Day 12/20:  on the plane (3.5 hours?) (no wifi! no googling!) getting a simple find to work, thinking 
of a horizontal row.  Then getting the coordinates, then searching backwards.

Second Day 12/21:  after family visit (3 hours?) (no googling still except for 2-dim arrays,
I want my solution to be original to me!!!).
Got the vertical fwd and backward searches working.  Started thinking about how
to search diagonally.  Realized I need a redesign and I need to have a GridLetter object
that has a Letter and its coordinates.  Then I need a 2-dim array of those to 
represent the word search grid.  Then I need to make a GridLine object out of those 
objects to represent horizontal, vertical and diagonal lines.  Lots of thought on a better
class design to handle this problem.
(Original classes used when first starting to code are in the NoLongerUsed folder).



Third Day 12/22:  spent some time with pencil and paper drawing out class designs.


Fourth Day 12/23: back on the plane with a little time to code out new logic. Crying baby on plane and no dinner.


Fifth Day 12/24 - Creating tests for Grid object.  Things are coming together. Next on the list
 is testing the reverse GridLine logic.  Then the loop to actually search the whole
 grid for words to find.  Then reading in the grid and words to find from a file.  Then
 desk check, reformat, more testing, and more doc.
 
  
12/26 - Check Pillar Kata instructions online again - had downloaded just the instructions 
for the WordSearch Kata since I was planning to work on flights w/o wifi.  Had forgotten that
I needed to watch the testing video.  Watched it, and refactored my test classes (had planned
to do that anyway), and added @Before to some tests where appropriate.  Changing how I commit
and test some because of watching the video.  Have major tests working.   
Still need to refactor & remove & cleanup some code, test with more input, and further 
document.  NEED EITHER TO DOCUMENT OR NOTE ABOUT INSTRUCTIONS SEEM TO HAVE X & Y MIXED UP
For efficiency, remove found words so we don't keep searching for them.

12/29/2017 - Added one more generated word search to the test suite.  Decided not to stop searching
through the grid after a word is found for that word because there is nothing saying they cannot
be found multiple times, although that would be unusual.
Retesting all tests - noticed that the ones in GridTest no longer work because I added logic when formatting
GridLines to also get and add the reverse Grid Line to the ArrayList of GridLines in the Grid object.
Fixed the tests to account for this by adding the reverse of the lines to the expected strings.
Removed System.out.printlns.  Added a main method to WordSearch so that it could take an input file
as a parameter and run from the command line.

12/30/2017 - Reading about gradle, trying to figure out how I can take the existing
project and add build gradle stuff to it.  Ended up copying it off to another
directory, creating a new project with the WCCI steps of mkdir, get the build gradle
file from WCCI github, then gradle eclipse, then importing into eclipse and copying
source files from copied off project into it.


12/31/2017 - Renamed original GitHub repository wordsearch to wordsearchw-ogradle 
(wordsearch without gradle).   
Made new repository WordSearch for restructured project where gradle is
used to build the directory structure, etc.
Deleted the NoLongerUsed directory from the new project on local repository
(it is still in the original one wordsearchw-ogradle).
added a .gitignore file to ignore binary files, etc.
Started edits for inputfile name validity.
Testing running from command line with correct classpath specified.

1/1/2018 - Finished coding edits for input file name validity and testing changes.
Added a second parameter "true" when invoking program to print out the input (words to find, grid).



initial build was not done the way they taught us in WCCI because I didn't have WIFI access to get 
the gradle build file.

Area for growth - understanding gradle/build environments

also need instructions on how to run and what is what
add an option on main to print the input file
